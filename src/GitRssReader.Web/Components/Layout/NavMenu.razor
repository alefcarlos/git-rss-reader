@using Fluxor
@using GitRssReader.Web.Data
@using GitRssReader.Web.Feed
@using Microsoft.EntityFrameworkCore
@using OPMLCore.NET
@inherits Fluxor.Blazor.Web.Components.FluxorComponent

@inject IDbContextFactory<AppDbContext> DbFactory;
@inject IState<UnreadFeedsState> UnreadFeedsState;
@inject IDispatcher Dispatcher
@inject FeedsCollectionProvider FeedsProvider

<div class="navmenu">
    <input type="checkbox" title="Menu expand/collapse toggle" id="navmenu-toggle" class="navmenu-icon" />
    <label for="navmenu-toggle" class="navmenu-icon"><FluentIcon Value="@(new Icons.Regular.Size20.Navigation())" Color="Color.Fill" /></label>
    <nav class="sitenav" aria-labelledby="main-menu">
        <FluentNavMenu Id="main-menu" Collapsible="false" Title="Navigation menu" @bind-Expanded="expanded" CustomToggle="true">
            <FluentNavLink Href="/" Match="NavLinkMatch.All" Icon="@(new Icons.Regular.Size20.Home())" IconColor="Color.Accent">Home</FluentNavLink>
            @foreach (var category in FeedsProvider.Data)
            {
                <FluentNavGroup Style="margin:10px 0" Title="@category.Title" Icon="@(new Icons.Regular.Size20.TagMultiple())" IconColor="Color.Accent">
                    @foreach (var feed in category.Feeds)
                    {
                        <FluentNavLink Href="@($"/feed/{category.Slug}/{feed.Slug}")" Match="NavLinkMatch.All" Icon="@(new Icons.Regular.Size20.News())" IconColor="Color.Accent">
                            @if (UnreadFeedsState.Value.UnreadFeeds.ContainsKey(feed.Slug))
                            {
                                <FluentBadge Circular=true Appearance="Appearance.Accent" slot="start">@UnreadFeedsState.Value.UnreadFeeds[feed.Slug]</FluentBadge>
                            }
                            @feed.Title
                        </FluentNavLink>
                    }
                </FluentNavGroup>
            }
        </FluentNavMenu>
    </nav>
</div>

@code {
    private bool expanded = true;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        Dispatcher.Dispatch(new FetchAllUnreadAction());
    }
}
