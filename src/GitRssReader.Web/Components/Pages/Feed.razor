@page "/feed/{categorySlug}/{target}"
@attribute [StreamRendering]
@using GitRssReader.Web.Data
@using Microsoft.EntityFrameworkCore
@using SimpleFeedReader
@inject FeedsCollectionProvider FeedsProvider
@inject IDbContextFactory<AppDbContext> DbFactory;

<h1>@feedInfo.Title</h1>

<p>@feedInfo.Description</p>
<FluentAnchor Appearance="Appearance.Lightweight" Href="@feedInfo.SiteUrl.ToString()">Acessar o site</FluentAnchor>

@if (entries == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <FluentDataGrid Items="@entries.AsQueryable()">
        <TemplateColumn Title="Título">
            <FluentAnchor Appearance="Appearance.Hypertext" Target="_blank" Href="@context.Url">@context.Title</FluentAnchor>
        </TemplateColumn>
        <PropertyColumn Title="Data de publicação" Property="@(a => a.PublishedDate)" Format="dd/MM/yyy" />
        <PropertyColumn Title="Lido" Property="@(a => a.IsRead)" />
    </FluentDataGrid>
}

@code {
    [Parameter]
    public required string CategorySlug { get; set; }

    [Parameter]
    public required string Target { get; set; }

    List<Article>? entries = null;
    FeedEntry feedInfo = default!;

    protected override async Task OnParametersSetAsync()
    {
        entries = null;
        var cat = FeedsProvider.Data.FirstOrDefault(x => x.Slug == CategorySlug);
        feedInfo = cat!.Feeds.First(x => x.Slug == Target);

        using var context = await DbFactory.CreateDbContextAsync();
        entries = await context.Articles.Where(x => x.FeedSlug == Target).ToListAsync();
    }
}