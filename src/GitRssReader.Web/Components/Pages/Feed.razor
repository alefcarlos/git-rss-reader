@page "/feed/{categorySlug}/{target}"
@inherits Fluxor.Blazor.Web.Components.FluxorComponent

@using Fluxor
@using GitRssReader.Web.Data
@using GitRssReader.Web.Feed
@using Microsoft.EntityFrameworkCore
@using SimpleFeedReader
@inject FeedsCollectionProvider FeedsProvider
@inject IDbContextFactory<AppDbContext> DbFactory;
@inject IJSRuntime JS
@inject IDispatcher Dispatcher

<PageTitle>Feed @feedInfo.Title</PageTitle>

<h1>@feedInfo.Title</h1>

<p>@feedInfo.Description</p>
<FluentAnchor Appearance="Appearance.Lightweight" Href="@feedInfo.SiteUrl.ToString()" Target="_blank">Acessar o site</FluentAnchor>

<FluentButton OnClick="@(() => MarkAsReadAsync())">Marcar como lido</FluentButton>

@if (entries == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <FluentDataGrid Items="@entries.AsQueryable()">
        <TemplateColumn Title="Título">
            <FluentButton Appearance="@(context.IsRead ? Appearance.Stealth : Appearance.Lightweight)"
            OnClick="@(() => OpenLinkAsync(context.Url))">
                @context.Title
            </FluentButton>
        </TemplateColumn>
        <PropertyColumn Title="Data de publicação" Property="@(a => a.PublishedDate)" Format="dd/MM/yyy" />
    </FluentDataGrid>
}

@code {
    [Parameter]
    public required string CategorySlug { get; set; }

    [Parameter]
    public required string Target { get; set; }

    List<Article>? entries = null;
    FeedEntry feedInfo = default!;

    protected override async Task OnParametersSetAsync()
    {
        entries = null;
        var cat = FeedsProvider.Data.FirstOrDefault(x => x.Slug == CategorySlug);
        feedInfo = cat!.Feeds.First(x => x.Slug == Target);

        using var context = await DbFactory.CreateDbContextAsync();
        entries = await context.Articles
            .Where(x => x.FeedSlug == Target)
            .OrderByDescending(x => x.PublishedDate)
            .ToListAsync();
    }

    public async Task OpenLinkAsync(string url)
    {
        await JS.InvokeVoidAsync("open", url, "_blank");
    }

    public async Task MarkAsReadAsync()
    {
        using var context = await DbFactory.CreateDbContextAsync();
        await context.Articles
            .Where(x => !x.IsRead && x.FeedSlug == Target)
            .ExecuteUpdateAsync(setters => setters.SetProperty(p => p.IsRead, true));


        var action = new MarkFeedAsReadAction
            {
                Feed = Target
            };

        Dispatcher.Dispatch(action);
    }
}